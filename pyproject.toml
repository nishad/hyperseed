[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hyperseed"
version = "0.1.0a3"
description = "An experimental tool for hyperspectral seed image analysis"
keywords = ["hyperspectral", "image-analysis", "seed-analysis", "spectroscopy", "remote-sensing", "machine-learning", "computer-vision"]
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [
    {name = "Nishad Thalhath"},
    {name = "Deepa Kasaragod"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.7.2",
    "scikit-image>=0.21.0",
    "opencv-python>=4.8.0",
    "spectral>=0.23.0",
    "matplotlib>=3.7.0",
    "plotly>=5.14.0",
    "click>=8.1.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "h5py>=3.9.0",
    "tqdm>=4.65.0",
    "colorama>=0.4.6",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.0.270",
    "mypy>=1.3.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "ipykernel>=6.23.0",
    "jupyter>=1.0.0",
]
gpu = [
    "torch>=2.0.0",
]

[project.scripts]
hyperseed = "hyperseed.cli.main:main"

[project.urls]
"Homepage" = "https://github.com/nishad/hyperseed"
"Bug Tracker" = "https://github.com/nishad/hyperseed/issues"
"Documentation" = "https://nishad.github.io/hyperseed"

[tool.setuptools]
package-dir = {"" = "."}
packages = ["hyperseed", "hyperseed.cli", "hyperseed.core", "hyperseed.core.io",
            "hyperseed.core.calibration", "hyperseed.core.preprocessing",
            "hyperseed.core.segmentation", "hyperseed.core.extraction",
            "hyperseed.config", "hyperseed.tests", "hyperseed.tests.fixtures"]

# [tool.setuptools.package-data]
# hyperseed = ["config/*.yaml", "config/*.json"]  # No config files currently

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | dataset
  | data
)/
'''

[tool.ruff]
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "dataset",
    "data",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
exclude = [
    "dataset/",
    "data/",
    "build/",
    "dist/",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--ignore=dataset",
    "--ignore=data",
    "--cov=hyperseed",
    "--cov-report=html",
    "--cov-report=term-missing",
]
testpaths = [
    "tests",
]
pythonpath = [
    ".",
]

[tool.coverage.run]
source = ["hyperseed"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
    "*/config/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "except ImportError:",
    "except KeyError:",
    "except Exception as e:",
    "pass",
]

[tool.coverage.html]
directory = "htmlcov"
